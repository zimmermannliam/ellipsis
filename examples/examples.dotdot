testList = [2,5,4,1,3]


------------------------------------------------------------------------
-- 
-- BASIC FUNCTIONS
-- 
------------------------------------------------------------------------

catelli [x1, ..., xn] [y1, ..., ym] = [x1, ..., xn, y1, ..., ym]

headelli [x1, ..., xn] = x1

lastelli [x1, ..., xn] = xn

tailelli [x1, ..., xn] = [x2, ..., xn]

initelli [x1, ..., xn] = [x1, ..., x{n-1}]

-- (Using errors instead of maybes)

uncons xs = case xs of {
    []              -> error;
    [x1, ..., xn]   -> (x1, [x2, ..., xn]);
}

unsnoc xs = case xs of {
    []              -> error;
    [x1, ..., xn]   -> ([x1, ..., x{n-1}], xn);
}

singleton x = [x]

null xs = xs == []

lengthelli [x1, ..., xn] = n

just x = [x]

dud p x = if p then [x] else []

undud = concat

------------------------------------------------------------------------
-- 
-- LIST TRANSFORMATIONS
-- 
------------------------------------------------------------------------

mapelli f [x1, ..., xn] = [f x1, ..., f xn]

reverseelli [x1, ..., xn] = [xn, ..., x1]

intersperse c xs = case xs of {
    []              -> [];
    [x1, ..., xn]   -> [x1, c] ++ ... ++ [x{n-1}, c] ++ [xn];
}

intercalate c xs = case xs of {
    []              -> [];
    [x1, ..., xn]   -> (x1 ++ c) ++ ... ++ (x{n-1} ++ c) ++ xn;
}

-- transpose

-- subsequences

-- permutations

------------------------------------------------------------------------
-- 
-- FOLDS
-- 
------------------------------------------------------------------------

foldlelli g z [x1, ..., xn] = z `g` x1 `g` ... `g` xn

foldl1elli g [x1, ..., xn] = x1 `g` ... `g` xn

foldrelli g z [x1, ..., xn] = x1 `g` (... `g` (xn `g` z))

foldr1elli g [x1, ..., xn] = x1 `g` (... `g` xn)


------------------------------------
-- Special folds
------------------------------------

concat [x1, ..., xn] = x1 ++ ... ++ xn ++ []

concatMap f [x1, ..., xn] = (f x1) ++ ... ++ (f xn) ++ []

and [x1, ..., xn] = x1 && ... && xn && True

or [x1, ..., xn] = x1 || ... || xn || False

any p [x1, ..., xn] = p x1 || ... || p xn || False

all p [x1, ..., xn] = p x1 && ... && p xn && True

sum [x1, ..., xn] = 0 + x1 + ... + xn

product [x1, ..., xn] = 1 * x1 * ... * xn

maximum [x1, ..., xn] = x1 `max` ... `max` xn

minimum [x1, ..., xn] = x1 `min` ... `min` xn

------------------------------------------------------------------------
--
-- BUILDING LISTS
--
------------------------------------------------------------------------

------------------------------------
-- scans
------------------------------------

{- scanl g z [x1, ..., xn]
    = [z, (z `g` x1), (z `g` x1 `g` x2), ..., (z `g` x1 `g` ... `g` xn)]
-}

scanl1 g [x1, ..., xn] = [x1, (x1 `g` x2), ..., (x1 `g` ... `g` xn)]

-- scanr g z [x1, ..., xn] = [(x1 `g` (... `g` (xn `g` z))), ..., (xn `g` z), z]

-- scanr1 g [x1, ..., xn] = [x1 `g` (... `g` xn), ..., xn]

------------------------------------
-- accumulating maps
------------------------------------

-- mapAccumL

-- mapAccumR

------------------------------------
-- infinite lists
------------------------------------

-- My language does not have infinite lists



------------------------------------
-- unfolding
------------------------------------

-- unfolding patterns?

------------------------------------------------------------------------
--
-- INDEXING LISTS
-- 
------------------------------------------------------------------------

subscript1 [x1, ..., xn] k = xk

subscript [x1, ..., xn] k = x{k+1}

elemIndices = elemIndices1

elemIndices1 y [x1, ..., xn]
    = (if y == x1 then [1] else []) ++ ... ++ (if y == xn then [n] else []) ++ []

elemIndices2 y [x1, ..., xn] = foldr cat [] $
    from if y == x1 then [1] else []
    to   if y == xn then [n] else []

findIndices1 p [x1, ..., xn] 
    = (if p x1 then [1] else []) ++ ... ++ (if p xn then [n] else []) ++ []

findIndices2 p [x1, ..., xn] = foldr cat [] $
    from if p x1 then [1] else []
    to   if p xn then [n] else []


------------------------------------------------------------------------
--
-- Sublists
--
------------------------------------------------------------------------

------------------------------------
-- Extracting sublists
------------------------------------

takeelli k [x1, ..., xn] = [x1, ..., xk]

dropelli k [x1, ..., xn] = [x{k+1}, ..., xn]

splitAt k [x1, ..., xn] = ([x1, ..., xk], [x{k+1}, ..., xn])

takeWhile p [x1, ..., xn] = case findIndices1 (\x -> not (p x)) [x1, ..., xn] of {
    []      -> [];
    k:ks    -> [x1, ..., x{k-1}];
}

dropWhile p [x1, ..., xn] = case findIndices1 (\x -> not (p x)) [x1, ..., xn] of {
    []      -> [x1, ..., xn];
    k:ks    -> [x{k}, ..., xn];
}

span p xs = (takeWhile p xs, dropWhile p xs)

dropWhileEnd p [x1, ..., xn] = case elemIndices1 p [x1, ..., xn] of {
    []              -> [x1, ..., xn];
    [k1, ..., km]   -> [x{km}, ..., xn];
}

-- break

stripPrefix [p1, ..., pk] [x1, ..., xn] =
    if [p1, ..., pk] == [x1, ..., xk]
    then [x{k+1}, ..., xn]
    else error


{- group xs =
    let go = \xs -> case xs of {
        [] -> []
        [x1, ..., xn]  
    }-}

-- indicesOfChange eq [x1, ..., xn] =


append y [x1, ..., xn] = [x1, ..., xn, y]

catLast y [x1, ..., xn] = [x1, ..., x{n-1}, xn ++ y]

ppa x f = f x

group [x1, ..., xn] = foldl ppa [[x1]] $
    from if x2 == x1     then catLast [x2] else append [x2]
    to   if xn == x{n-1} then catLast [xn] else append [xn]

groupByNeighbor eq [x1, ..., xn] = foldl ppa [[x1]] $
    from if eq x1 x2     then catLast [x2] else append [x2]
    to   if eq x{n-1} xn then catLast [xn] else append [xn]

initselli [x1, ..., xn] = [ [], [x1], ..., [x1, ..., xn]]

tailselli [x1, ..., xn] = [[x1, ..., xn], ..., [xn], []]

tailsR [x1, ..., xn] = [[], [xn], ..., [x1, ..., xn]]


-- no indicesOfChangeBy

{-
groupBy eq [x1, ..., xn] = case [1] ++ (indicesOfChangeBy eq [x1, ..., xn]) ++ [n] of {
    []              -> [x1, ..., xn];
    [k1, ..., km]   -> 
        from [x{k1}, ..., x{k2}]
        to   [x{k{m-1}}, ..., x{km}]
}-}

-- tails [x1, ..., xn] = [ [x1, ..., xn], ..., [xn], [] ]

------------------------------------------------------------------------
--
-- PREDICATES
-- 
------------------------------------------------------------------------

isPrefixOf [p1, ..., pk] [x1, ..., xn] = [p1, ..., pk] == [x1, ..., xk]

isSuffixOf [s1, ..., sk] [x1, ..., xn] = [s1, ..., sk] == [x{n-k+1}, ..., xn]

isInfixOf [i1, ..., ik] [x1, ..., xn]
    = ([i1, ..., ik] == [x1, ..., xk]) || ... || ([i1, ..., ik] == [x{n-k+1}, ..., xn]) || False

oror a b = a || b

isInfixOf2 [i1, ..., ik] [x1, ..., xn] = foldr oror False (
    from [i1, ..., ik] == [x1, ..., xk]
    to   [i1, ..., ik] == [x{n-k+1}, ..., xn])

-- isSubsequenceOf

------------------------------------------------------------------------
--
-- SEARCHING LISTS
-- 
------------------------------------------------------------------------

------------------------------------
-- searching by equality
------------------------------------

elem y [x1, ..., xn] = (y == x1) || ... || (y == xn) || False

notElem y [x1, ..., xn] = (y /= x1) && ... && (y /= xn) && True

------------------------------------
-- searching with a predicate
------------------------------------

find p x = head (filter p x)

filter p [x1, ..., xn] 
    = (if p x1 then [x1] else []) ++ ... ++ (if p xn then [xn] else []) ++ []

filter2 p [x1, ..., xn] = foldr cat [] $
    from if p x1 then [x1] else []
    to   if p xn then [xn] else []


{- ditto
partition p [x1, ..., xn] = ([x1, ..., xn | p x], [x1, ..., xn | not (p x)])
-}

------------------------------------------------------------------------
--
-- ZIPPING AND UNZIPPING LISTS
-- 
------------------------------------------------------------------------

zip [x1, ..., xn] [y1, ..., ym] = [(x1, y1), ..., (xn, ym)]

-- ...

zipWith f [x1, ..., xn] [y1, ..., ym] = [f x1 y1, ..., f xn ym]

-- ...

-- unzip

-- ...

------------------------------------------------------------------------
--
-- "SET" OPERATIONS
--
------------------------------------------------------------------------


--    , if x3 `elem` [x1, x2]          then [] else [x3]

nub [x1, ..., xn] = concat
    [ [x1]
    , if x2 `elem` [x1]              then [] else [x2]
    , ...
    , if xn `elem` [x1, ..., x{n-1}] then [] else [xn]
    ]

nub2 [x1, ..., xn] = undud
    [ just x1
    , dud (x2 `notElem` [x1]) x2
    , ...
    , dud (xn `notElem` [x1, ..., x{n-1}]) xn
    ]

delete y [x1, ..., xn] = case elemIndices1 y [x1, ..., xn] of {
    []      -> [x1, ..., xn];
    k:ks    -> [x1, ..., x{k-1}, x{k+1}, ..., xn];
}

-- doesn't work

deleteAll y [x1, ..., xn] = case elemIndices1 y [x1, ..., xn] of {
    []            -> [x1, ..., xn];
    [k1, ..., km] -> [x{k1+1},      ..., x{k2-1}] 
                  ++ ... 
                  ++ [x{k{m-1}+1},  ..., x{km-1}];
    }

    
-- \\

-- union

-- intersect

------------------------------------------------------------------------
-- 
-- ORDERED LISTS
-- 
------------------------------------------------------------------------

-- sort

-- sortOn

insert y [x1, ..., xn] = case findIndices1 (\a -> a > y) [x1, ..., xn] of { 
    []      -> [x1, ..., xn, y];
    k:ks    -> [x1, ..., x{k-1}, y, xk, ..., xn];
}


------------------------------------------------------------------------
--
-- OTHERS FROM EXAMPLES.TXT
--
------------------------------------------------------------------------

-- Success: map, fold, fac, cat, reverse, zip, zipWith, take, drop, 
-- splitAt mapR, foldm, foldz, dotProduct, concatMap, intersperse, 
-- all, and, rdup (see nub)

-- Failed: lookup, groupBy

-- Lookup would need better list pattern. groupBy I couln't think of anything,
-- but I might someday.

lookup2 needlek [k1, ..., km] [v1, ..., vn] = 
    if m /= n
    then error
    else case elemIndices1 needlek [k1, ..., km] of {
    []      -> error;
    i:is    -> v{i};
}

fac n = n * (n-1) * ... * 1

mapR f [x1, ..., xn] = [f xn, ..., f x1]

foldm g f [x1, ..., xn] = (f x1) `g` ... `g` (f xn)

foldz g [x1, ..., xn] [y1, ..., ym]
    = (x1, y1) `g` ... `g` (xn, ym)

dotProduct [x1, ..., xn] [y1, ..., ym]
    = if n == m
      then 0 + x1*y1 + ... + xn*yn
      else error

insertAt y k [x1, ..., xn] = [x1, ..., x{k}, y, x{k+1}, ..., xn]

------------------------------------------------------------------------
--
-- OTHERS
--
------------------------------------------------------------------------

neighbors [x1, ..., xn] = [(x1, x2), ..., (x{n-1}, xn)]

remove k [x1, ..., xn] = [x1, ..., x{k-1}, x{k+1}, ..., xn]

replace k y [x1, ..., xn] = [x1, ..., x{k-1}, y, x{k+1}, ..., xn]

rotL k [x1, ..., xn] =
    let kMod = k `mod` n
    in [x{kMod + 1}, ..., xn, x1, ..., x{kMod}]

combinations [x1, ..., xn] [y1, ..., ym] 
    = [(x1, y1), ..., (xn, y1)] ++ ... ++ [(x1, ym), ..., (xn, ym)] ++ []


count e [x1, ..., xn] = 0 + (if x1 == e then 1 else 0) + ... + (if xn == e then 1 else 0)

sublistOccurs [y1, ..., yk] [x1, ..., xn] = count True (
    from [y1, ..., yk] == [x1, ..., xk]
    to   [y1, ..., yk] == [x{n-k+1}, ..., xn])

binSearch y xs = 
    let go = \xs -> case xs of {
        []              -> False;
        [x1, ..., xn]   -> 
            let k = n `div` 2 + 1
            in if xk == y       then True
            else if xk > y      then go [x1, ..., x{k-1}]
            else                     go [x{k+1}, ..., xn];
        }
    in go xs

isEven x = (x `mod` 2) == 0

isOdd x = (x `mod` 2) == 1

gt5 x = x > 5

lt5 x = x < 5

hourglass x = [ [1, ..., x], ..., [x, ..., 1] ]

twists [x1, ..., xn] = [ [x1, ..., xn], ..., [xn, ..., x1] ]

lt a b = a < b

geq a b = a > b || a == b

quicksort list =
    let go = \xs -> case xs of {
        []              -> [];
        [x1, ..., xn]   -> 
            (go $ filter (geq x1) [x2, ..., xn])
            ++ [x1]
            ++ (go $ filter (lt x1) [x2, ..., xn]);
    }
    in go list

kthSmallest k list = subscript1 (quicksort list) k

sort [x1, ..., xn] = 
    [ 1 `kthSmallest` [x1, ..., xn]
    , ...
    , n `kthSmallest` [x1, ..., xn]
    ]

allEq [x1, ..., xn] = x2 == x1 && ... && xn == x1 && True

f1 i j = [1000 * i, ..., 1000 * j]

mulThousand x = 1000 * x

f2 i j = [mulThousand i, ..., mulThousand j]

p n = 1^2 + 2^2 + ... + n^2

poly x [c1, ..., cn] = 0 + c1 * x^(0) + ... + cn * x^(n-1)