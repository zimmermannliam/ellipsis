------------------------------------------------------------------------
--
-- TRIVIAL EXAMPLES
--
------------------------------------------------------------------------

-- | map f xs is the list obtained by applying f to each element of xs.
map f [x1,...,xn] = [f x1,...,f xn]

-- | zip takes two lists and returns a list of corresponding pairs.
zip [x1,...,xn] [y1,...,ym] = [(x1, y1),...,(xn, ym)]
-- or
zip' [x1,...,xn] [y1,...,ym] =
    let k = min n m
    in [(x1, y1),...,(xk, yk)]

-- | fold reduces the list using a binary operator from left to right.
fold g [x1,...,xn] = x1 `g` ... `g` xn

-- | length xs returns the length of the list.
length [x1,...,xn] = n

-- | head extracts the first element of a list, which must be non-empty.
head [x1,...,xn] = x1

-- | tail extracts the elements after the head of a list, which must be
-- non-empty.
tail [x1,...,xn] = [x2,...,xn]

-- | take k, applied to a list xs, returns the prefix of xs of length k, or xs
-- itself is k >= length xs
take k [x1,...,xn] = [x1, ..., xk]

-- | drop k xs returns the suffix of xs after the first k elements, or [] if
-- k >= length xs
drop k [x1,...,xn] = [xk, ..., xn]

------------------------------------------------------------------------
--
-- EXAMPLES
--
------------------------------------------------------------------------

-- | inits returns all initial segments of the argument, shortest first.
inits [x1,...,xn] = [[], [x1], [x1,x2], ..., [x1,x2,...,xn]]
-- or
inits' [x1,...,xn] = [[], [x1], ..., [x1,...,xn]]
-- or
inits'' [x1,...,xn] = [[], ..., [x1,...,xn]]

-- | scanl1 is similar to foldl1, but returns a list of successive values
-- reduced from the left.
scanl1 f [x1,...,xn] = [x1, foldl1 f [x1,x2], ..., foldl1 f [x1...xn]]
-- or
scanl1 f [x1,...,xn] = [foldl1 f [x1], ..., foldl1 f [x1...xn]]

-- | neighbors pairs adjacent elements of a list.
neighbors [x1,...,xn] = [(x1, x2),...,(x{n-1},xn)]

-- | remove deletes the kth element from a list.
remove k [x1,...,xn] = [x1, ..., x{k-1}, x{k+1}, ..., xn]

-- | replace exchanges the kth element from a list with y.
replace k y [x1,...,xn] = [x1, ..., x{k-1}, y, x{k+1}, ..., xn]

-- | rotL cycles the list leftwards by k elements.
rotL k [x1,...,xn] =
    let k' = k `mod` n
    in [x{k'+1},...,xn,x1,...,x{k'}]