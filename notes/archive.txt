
Using the inference rules in Figure \ref{fig:trans-infer-traversal},
the expression interpolated from $($\zlst[mathescape]!x1 + y1!$)$ to $($\zlst[mathescape]!xk + yk!$)$
is the interpolation from \zlst!x1! to \zlst!xk!
plus the interpolation from \zlst!y1! to \zlst!yk!:
\[
\JUDGE
    {\ELL{(\zlst[mathescape]!x1 + y1!)}{(\zlst[mathescape]!xk + yk!)}}
    {(\ELL{\zlst[mathescape]!x1!}{\zlst[mathescape]!xk!})
    \zlst!\ +\ !(\ELL{\zlst[mathescape]!y1!}{\zlst[mathescape]!yk!})}
\]
In addition, judgements produce sets of variable-list pairs, which are union-ed:
\begin{mathpar}
\JUDGE
    {(\ELL{\zlst!x1!}{\zlst!xk!})}
    {
        \jpair{\zlst!a!}{ \SET{\spair{a}{\zlst!slice x 1 k!}}}
    }
\and
\JUDGE
    {(\ELL{\zlst!y1!}{\zlst!yk!})}
    {
        \jpair{\zlst!b!}{ \SET{\spair{b}{\zlst!slice y 1 k!}}}
    }
\end{mathpar}

The first sub-expression interpolation,
$(\ELL{\zlst[mathescape]!x1!}{\zlst[mathescape]!xk!})$
or ``the interpolation from \zlst!x1! to \zlst!xk!'',
is understood by the translation rules to be a list of the elements between
\zlst!x1! and \zlst!xk!.
We return a fresh variable, \zlst!a!,
and we produce the list of \zlst!x!s between \zlst!1! and \zlst!k!:
\zlst[mathescape]![x1, x2, $\metaell$, x{k-1}, xk]!,
using the \zlst!slice! function: \zlst!slice x 1 k!.
\[
\JUDGE
    {(\ELL{\zlst[mathescape]!x1!}{\zlst[mathescape]!xk!})}
    {\jpair{\zlst!a!}{\SET{\spair{\zlst!a!}{\zlst!slice x 1 k!}}}}
\]

The second sub-expression interpolation, 
$(\ELL{\zlst[mathescape]!y1!}{\zlst[mathescape]!yk!})$,
works much the same way:

\[
\JUDGE
    {(\ELL{\zlst[mathescape]!y1!}{\zlst[mathescape]!yk!})}
    {\jpair{\zlst!b!}{\SET{\spair{\zlst!b!}{\zlst!slice y 1 k!}}}}
\]















\begin{mathpar}
\inferrule[]
{
\JUDGE{\ELL{\zlst!x1!}{\zlst!xk!}}{\res{(A)}}
\\
\JUDGE{\ELL{\zlst!y1!}{\zlst!yk!}}{\res{(B)}}
}
{
\JUDGE{\ELL{(\zlst!x1+y1!)}{(\zlst!xk+yk!)}}{\jpair{\expr{(A)} \zlst!+! \expr{(B)}}{\slices{(A)} \cup \slices{(B)}}}
}
\end{mathpar}



As another example, take the \zlst!filter! function.
\zlst!filter! takes a function \zlst!p! of type \zlst!a -> Bool!
and a list of type \zlst![a]!,
and produces a list of type \zlst![a]!,
which contains only the elements of the list that ``passed'' (returned \zlst!True! for) \zlst!p!.
In Elli-Haskell, it could be implemented like this:
\begin{lstlisting}
filter p [x1, ..., xn] = concat
    [ if p x1 then [x1] else []
    , ...
    , if p xn then [xn] else []
    ]
\end{lstlisting}
The function creates singletons containing passing elements,
and empty lists for failing elements.
It then concatenates the lists,
effectively removing the empty lists and unwrapping the singletons.

\begin{figure}[t]

\begin{mathpar}
\inferrule*[left=Z]
{
\inferrule
}
{
\ELL{ \zlst!if p x1 then [x1] else []!}
    {\zlst!if p xn then [xn] else []! }
\\
\rightsquigarrow
\jpair
    {\zlst!if a then [b] else []!}
    {
        \SET{ \spair{\zlst!a!}{(\zlst!slice x 1 n!)},\;
        \spair{\zlst!b!}{\zlst!slice x 1 n!}
        }
    }
}
\end{mathpar}

\caption{Derivation tree for \zlst!filter!}
\label{fig:filter-tree}
\end{figure}

To translate the ellipsis expression,
we need to interpolate between the expressions:
\begin{mathpar}
\zlst!if p x1 then [x1] else []!
\and
\zlst!if p xn then [xn] else []!
\end{mathpar}

\begin{align*}
\end{align*}

% This inference requires slightly more sophistication than nested ellipsis.
% For instance, the the interpolation of the pair
% $\ELL{\zlst{[x1, x2, x3]}}{\zlst{[x1, ..., xn]}}$
% clearly intends to build a list from the first 3 \zlst{x}s to the entire list of \zlst{x}s.
% However, the nested pair
% $\ELL{\zlst{[x3, x1, x2]}}{\zlst{[x1, ..., xn]}}$
% is not meaningful.
% Some sort of mechanism to check the entire list is necessary.

% One thing immediately noticeable about this inference
% is that it requires checking the list on the opposite side to the ellipsis. 
% \lstinline{[x1, x2, x3, x4], ..., [x1, ..., xn]}
% requires that the left-hand side be checked for the correct order:
% \lstinline{[x1, x3, x4, x2]} would not be valid against
% \lstinline{[x1, ..., xn]}.
% In addition,
% the structure for each element of the list must be similar.
% These details are discussed in the implementation section \note{not totally yet}.
%
%The inference rules in Figure \ref{fig:trans-cons-elli} show how lists of determined size
%are interpolated with ellipsis lists.

For instance, the following function is ambiguous:
\begin{lstlisting}
buildFromMiddle [x1, ..., xn] =
    let k = n/2+1  -- Middle element
    in [[xk], ..., [x1, ..., xn]]
\end{lstlisting}
The ambiguity lies in choosing which direction the list will build:
will the next expression be \zlst![xk, x{k+1}]!
or \zlst![x{k-1}, xk]!?







\NOTE{Should I add the below text to the limitations section instead?
It really has to do with a limitation of my work, not a limitation of ellipsis.
I am actually working on a type-inferred version of mini/elli haskell,
but it's not done yet and I want to focus on the paper.}

However, this does not catch more complex expressions involving integers,
for example:

\begin{lstlisting}
enumerate [x1,...,xn] = [(x1,0),...,(xn,n-1)]
\end{lstlisting}

A translation of $\ELL{0}{n-1}$ would fail.
Instead of defining all the arithmetic operators in the translation function, however,
this could be remedied using simple type inferences.
For a judgement $\ELL{\exprx{1}}{\exprx{2}}$,
if $\exprx{1} : Int$ and $\exprx{2} : Int$, plus
$\exprx{} \notin \exprx{1}$ and
$\exprx{} \notin \exprx{2}$,
a range could be made between $\exprx{1}$ and $\exprx{2}$.

The inference would have to avoid Elli-Haskell expressions.
Otherwise, any list elements for integer lists could be unintentionally enumerated together,
instead of sliced together.
For example, with the \zlst{addEnumeration'} function:

\begin{lstlisting}
addEnumeration' [x1,...,xn] = [x1+0,...,xn+(n-1)]
\end{lstlisting}

\lstinline|addEnumeration'| would be expected to produce the following translation:
\lstinline|zipWith (+) xs (range 0 (length xs - 1))|,
not an enumeration between \lstinline|x1+0| and \lstinline|xn+(n-1)|
(\lstinline|range (x1+0) (xn+(n-1)|).

Correctly:

\begin{lstlisting}
> addEnumeration' [1,10,15,3]
[1+0, 10+1, 15+2, 3+3] == [1, 11, 17, 6]
\end{lstlisting}

Incorrectly:

\begin{lstlisting}
> addEnumeration' [1,10,15,3]
[1, 2, 3, 4, 5, 6]
\end{lstlisting}


Additionally, note that the expression \lstinline|x1+0| could be further simplified:

\begin{lstlisting}
addEnumeration [x1,...,xn] = [x1,...,xn+(n-1)]
\end{lstlisting}

This requires inference about the identity property of \lstinline|(+)| ($x+0$ or $0+x$).
This could also be defined for
\lstinline|div| ($x \lstinline|`div`| 1$),
\lstinline|(-)| ($x-0$), and
\lstinline|(*)| ($x*1$ or $1*x$).

\begin{lstlisting}
divEnumeration1 [x1, ..., xn] = [x1, ..., xn `div` n]  -- [x1 `div` 1, ..., xn `div` n]
mulEnumeration1 [x1, ..., xn] = [x1, ..., xn * n]  -- [x1 * 1, ..., xn * n]
subEnumeration1 [x1, ..., xn] = [x1, ..., xn - n]  -- [x1 - 0, ..., xn - n]
\end{lstlisting}

Presently,
none of the type checker-enabled features have been implemented in the Elli-Haskell translator.
\note{This is on my list of extensions}
However, as a simple solution, \zlst{let} expressions may be used:

\begin{lstlisting}
rangeNotIncludingB a b = [a, ..., b-1]
-- becomes
rangeNotIncludingB a b = let b' = b-1 in [a, ..., b']
\end{lstlisting}
\begin{figure}[t]
    \IMPORTANT{
\begin{mathpar}

\inferrule[Variable-to-variable]
    { v_1 \neq v_2 }
    {\JUDGE
        {\ELL{v_1}{v_2}}
        {\jpair
            {\freshv{}}
            {\SET{\spair{\freshv{}, \zlst{range\ } v_1 \spc v_2}}}
        }
    }

\inferrule[Int-to-int]
    { int_1 \neq int_2 }
    {\JUDGE
        {\ELL{int_1}{int_2}}
        {\jpair
            {\freshv{}}
            {\SET{\spair{\freshv{}, \zlst{range\ } int_1 \spc int_2}}}
        }
    }

\inferrule[Variable-to-int]
    { }
    {\JUDGE
        {\ELL{v}{int}}
        {\jpair
            {\freshv{}}
            {\SET{\spair{\freshv{}, \zlst{range\ } v \spc int}}}
        }
    }

\inferrule[Int-to-variable]
    { }
    {\JUDGE
        {\ELL{int}{v}}
        {\jpair
            {\freshv{}}
            {\SET{\spair{\freshv{}, \zlst{range\ } int \spc v}}}
        }
    }

\end{mathpar}
}

    \caption{Ranges}
    \label{fig:trans-range}
\end{figure}


















In the ranges section,
expressions that are obviously integers can be made into a range.
This is done without type-checking, instead using
integer constants, variables, and integer operators like
\zlst!+!, \zlst!-!, \zlst!*!, \zlst!`div`!, and \zlst!`mod`!
to infer that something is an integer.

However, there is a strange case that is created from this approach.
Take this example function \zlst!f!:
\begin{lstlisting}
f i j = [1000*i, ..., 1000*j]
\end{lstlisting}
In this case, a range is created between
\zlst!1000*i! and \zlst!1000*j!.
If \zlst!f 1 2! were to be called,
\zlst!i! would be \zlst!1! and \zlst!j! would be \zlst!2!,
and the following range of integers would be created:
\begin{lstlisting}[mathescape]
[1000, 1001, 1002, $\metaell$, 1998, 1999, 2000]
\end{lstlisting}

However, if instead a similar function \zlst!g! were defined using a helper function \zlst!mulThousand!:
\begin{lstlisting}
mulThousaund x = 1000 * x

g i j = [mulThousand i, ..., mulThousand j]
\end{lstlisting}
This would output the following list:
\begin{lstlisting}
[1000, 2000]
\end{lstlisting}

This flaw can be alleviated by using type inference.
Assuming some type context $\Gamma$ was kept up in the translation,
the following inference rule could be used for ranges:
\begin{mathpar}
\inferrule[Ranges]
{
\Gamma \vdash \expr{l} : int
\\
\Gamma \vdash \expr{r} : int
\\
\expr{l} \neq \expr{r}
}
{
%
\JUDGE
{
    \Gamma \vdash \ELL{\expr{l}}{\expr{r}}
}
{
    \jpair
    {
        \freshv{}
    }
    {
        \spair
        {
            \freshv{}
        }
        {
            \zlst!(range\ !
            \expr{l}
            \spc
            \expr{r}
            \zlst!)!
        }
    }
}
%
}
\end{mathpar}

Extended expressions would not be included in ranges.
This is to prevent list elements from creating ranges instead of slices:
For a list of integers \zlst!x!s,
\zlst![x1, ..., xk]! should mean ``elements of list \zlst!x!s from \zlst!1! to \zlst!k!'',
not ``enumeration between the values at \zlst!x1! and \zlst!xk!''.

Using the aforementioned inference rules,
\zlst!f 1 2! and \zlst!g 1 2! would both output the same result:
\begin{lstlisting}[mathescape]
[1000, 1001, 1002, $\metaell$, 1998, 1999, 2000]
\end{lstlisting}

This is considered the correct result due to its similarity to Haskell 98's
\zlst!enumFromTo! operator.
However, it is really somewhat ambiguous as to whether it should evaluate to
\zlst[mathescape]![1000*i, (1000*i)+1, (1000*i)+2, $\metaell$, 1000*j]!
or
\zlst[mathescape]![1000*i, 1000*(i+1), 1000*(i+2), $\metaell$, 1000*j]!.
This is discussed further in Section \ref{sequences}.

Elli-Haskell does not address sequence-building, which can lead to unintuitive results.
For example, take the common ellipsis form for the square pyramidal number:
\[
1^2 + 2^2 + ... + n^2
\]

Intuitively, this should expand like this:
\[
1^2 + 2^2 + 3^2 + 4^2 + 5^2 + ... + (n-1)^2 + n^2
\]
To recurrence relation $f$ where:
\begin{mathpar}
n \geq 1
\and
f(1) = 1
\and 
f(n) = n^2 + f(n-1)
\end{mathpar}


However, in Elli-Haskell's interpretation (assuming power was included as a range operator),
this would expand to:
\[
1^2 + 2^2 + (2^2 + 1) + (2^2 + 2) + ... + (n^2 - 1) + n^2
\]
With the recurrence relation $f$ where:
\begin{mathpar}
n \geq 1
\and
f(1) = 1
\and
f(n) = 1 + g(n^2)
\\
g(4) = 4
\and
g(n) = n + g(n-1)
\end{mathpar}

\def\mathcat{\zlst!++!}

This is because Elli-Haskell understands sequences like $[y, x_1, ..., x_n]$ to mean
$[y] \mathcat [x_1, ..., x_n]$, where $\mathcat$ indicates concatenation.
This is useful: it enables functions like \zlst!append! and \zlst!insert! without much trouble.
We chose this in Elli-Haskell due to its greater convenience.
\begin{lstlisting}
append y [x1, ..., xn] = [y, x1, ..., xn]
insert y k [x1, ..., xn] = [x1, ..., xk, y, x{k+1}, ..., xn]
\end{lstlisting}

However, sequences could be used to squash ambiguities instead.








%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Begin boilerplate
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


Boilerplate cases of translation are shown in Figure \ref{fig:trans-expr-trav}.
Because Elli-Haskell is based on Mini-Haskell,
these expressions are nearly identical.

\begin{figure}[H]
    \centering

\IMPORTANT{
\begin{mathpar}
\inferrule[Variable]
    { }
    {\JUDGE
        {\EXPR{v}}
        {v}
    }

\inferrule[Abstraction]
    {\JUDGE{\EXPR{\exprx{}}}{\expr{}}
    }
    {\JUDGE
        {\EXPR{\zlst{\\} v \zlst{\ ->\ } \exprx{}}}
        {\zlst{\\} v \zlst{\ ->\ } \expr{}}
    }

\inferrule[Application]
    {
        \JUDGE{\EXPR{\exprx{1}}}{\expr{1}}
        \\
        \JUDGE{\EXPR{\exprx{2}}}{\expr{2}}
    }
    { \JUDGE
        {\EXPR{\exprx{1}\spc\exprx{2}}}
        {\expr{1}\spc\expr{2}}
    }

\inferrule[Let]
    {
        \JUDGE{\EXPR{\exprx{1}}}{\expr{1}}
        \\
        \JUDGE{\EXPR{\exprx{2}}}{\expr{2}}
    }
    {\JUDGE
        {\EXPR{\zlst{let\ } v \zlst{\ =\ } \exprx{1} \zlst{\ in\ } \exprx{2}}}
        {\zlst{let\ } v \zlst{\ =\ } \expr{1} \zlst{\ in\ } \expr{2}}
    }
% \inferrule[If-then-else]
%     {
%         \JUDGE{\EXPR{\exprx{1}}}{\expr{1}}
%         \\
%         \JUDGE{\EXPR{\exprx{2}}}{\expr{2}}
%         \\
%         \JUDGE{\EXPR{\exprx{3}}}{\expr{3}}
%     }
%     {\JUDGE
%         {\EXPR{
%             \zlst{if\ } \exprx{1} \zlst{\ then\ } \exprx{2} \zlst{\ else\ } \exprx{3}
%         }}
%         {
%             \zlst{if\ } \expr{1} \zlst{\ then\ } \expr{2} \zlst{\ else\ } \expr{3}
%         }
%     }
\inferrule[Infix]
    {
        \JUDGE{\EXPR{\exprx{1}}}{\expr{1}}
        \\
        \JUDGE{\EXPR{\exprx{2}}}{\expr{2}}
    }
    {\JUDGE
        {\EXPR{\exprx{1} \oplus \exprx{2}}}
        {\expr{1} \oplus \expr{2}}
    }
    
\inferrule[Pair]
    {
        \JUDGE{\EXPR{\exprx{1}}}{\expr{1}}
        \\
        \JUDGE{\EXPR{\exprx{2}}}{\expr{2}}
    }
    {\JUDGE
        {\EXPR{\zlst{(} \exprx{1} \zlst{,\ } \exprx{2} \zlst{)} }}
        {\zlst{(} \expr{1} \zlst{,\ } \expr{2} \zlst{)} }
    }

\inferrule[List constructor]
    {
    \JUDGE
        {\EXPR{\exprx{1}}}
        {\expr{1}}
    \\    
    \JUDGE
        {\EXPR{\exprx{2}}}
        {\expr{2}}
    }
    {
    \JUDGE
        {\EXPR{\exprx{1}\zlst{:}\exprx{2}}}
        {\expr{1}\zlst{:}\expr{2}}
    }

\inferrule[Constant]
    { }
    {\JUDGE
        {\EXPR{con}}
        {con}
    }

\end{mathpar}
}
    \caption{Trivial expression translations}
    \label{fig:trans-expr-trav}
\end{figure}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% End boilerplate
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Begin case
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\label{trans-case}
Figure \ref{fig:trans-expr-case} shows the translation of case expressions.
The target expression, $e$, is translated, along with every $alt$ (shown in section
\ref{trans-alt}).
The $\JUDGE{}{}$ operator is overloaded to be a translation between $alt$s as well.

\begin{figure}[H]
    \centering

\IMPORTANT{
\begin{mathpar}
\inferrule[Case]
    { 
        \JUDGE{\EXPR{\exprx{}}}{\expr{}'}
        \\
        (\JUDGE{\ALT{\alt{1}}}{\alt{1}'})
        \metaell
        (\JUDGE{\ALT{\alt{n}}}{\alt{n}'})
    }
    {\JUDGE
        {\EXPR{
            \zlst{case\ } \exprx{} \zlst{\ of\ }
            \zlst{\{} \alt{1} \zlst{;\ } \metaell \zlst{;\ } \alt{n} \zlst{;\}}
        }}
        {
            \zlst{case\ } \expr{}' \zlst{\ of\ } 
            \zlst{\{} \alt{1}' \zlst{;\ } \metaell \zlst{;\ } \alt{n}' \zlst{;\}}
        }
    }
\end{mathpar}
}

    \caption{Case expression translation}
    \label{fig:trans-expr-case}
\end{figure}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% End case
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\subsection*{Operator semantics}
\def\lf{\left\lfloor}   
\def\rf{\right\rfloor}

\begin{figure}[H]
\begin{mathpar}
    OP(\zlst{+}, int_1, int_2) = int_1 + int_2
    \and
    OP(\zlst{-}, int_1, int_2) = int_1 - int_2
    \and
    OP(\zlst{*}, int_1, int_2) = int_1 \times int_2
    \and
    OP(\zlst{`div`}, int_1, int_2) = \lf \frac{int_1}{int_2} \rf
    \\
    OP(\zlst{&&}, \zlst{False}, \zlst{False}) = \zlst{False}
    \and
    OP(\zlst{&&}, \zlst{False}, \zlst{True}) = \zlst{False}
    \and
    OP(\zlst{&&}, \zlst{True}, \zlst{False}) = \zlst{False}
    \and
    OP(\zlst{&&}, \zlst{True}, \zlst{True}) = \zlst{True}
    \\
    OP(\zlst{||}, \zlst{False}, \zlst{False}) = \zlst{False}
    \and
    OP(\zlst{||}, \zlst{False}, \zlst{True}) = \zlst{False}
    \and
    OP(\zlst{||}, \zlst{True}, \zlst{False}) = \zlst{False}
    \and
    OP(\zlst{||}, \zlst{True}, \zlst{True}) = \zlst{True}
    \\
    OP(\zlst{==}, val, val) = \zlst{True}
    \and
    OP(\zlst{==}, val_1, val_2),val_1 \neq val_2 = \zlst{False} 
    \\
    OP(\zlst{/=}, val, val) = \zlst{False}
    \and
    OP(\zlst{/=}, val_1, val_2),val_1 \neq val_2  = \zlst{True} 
    \\
    OP(\zlst{>}, int_1, int_2) = int_1 > int_2
    \\
    OP(\zlst{>}, int_1, int_2) = int_1 > int_2
    \and
    OP(\zlst{<}, int_1, int_2) = int_1 < int_2
\end{mathpar}

\caption{Operator semantics}
\label{fig:sem-mini-ops}
\end{figure}

% The following diagram depicts a translation over 
% 
% \begin{figure}[H]
% \centering
% \begin{mathpar}
%     \zlst[mathescape]![x{1} $\oplus$ y{1}, ..., x{k} $\oplus$ y{k}]!
% \\
%     {\Tree [.$\oplus$ \zlst!x\{1\}! [.\zlst!y\{1\}! ] ]}
%     \ELL{}{}
%     {\Tree [.$\oplus$ \zlst!x\{k\}! [.\zlst!y\{k\}! ] ]}
% \and
%     \raisebox{-16pt}{\scalebox{2}{$\rightsquigarrow$}}
% \and
%     \Tree [.$\oplus$ $\ELL{\zlst!x\{1\}!}{\zlst!x\{k\}!}$ [.$\ELL{\zlst!y\{1\}!}{\zlst!y\{k\}!}$ ] ]
% \and
%     \raisebox{-16pt}{\scalebox{2}{$\rightsquigarrow$}}
% \and
%     {\Tree [.$\oplus$ $\freshv{1}$ [.$\freshv{2}$ ] ]}
% \\
%     \zlst[mathescape]!zipWith ($\oplus$) (slice x 1 k) (slice y 1 k)!
% \end{mathpar}
% %\caption{Syntax tree translation traversal over infix functions}
% %\label{fig:trans-infer-traversal-tree}
% \end{figure}
% 
% Note that the translation pairs \zlst!x{1}! with \zlst!x{k}!, and \zlst!y{1}! with \zlst!y{k}!.
% This is so the interpolation translator knows that \zlst!x! goes from \zlst!1! to \zlst!k!,
% and the same for \zlst!y!.


% \inferrule[Empty-to-ellipsis]
%     {
%         \JUDGE
%             {
%                 \EXPR {\zlst{[}\exprx{r_1}\zlst{, ...,\ }\exprx{r_2}\zlst{]}}
%             }
%             {
%                 \jpair{\expr{r}}
%             }
%     }
%     {\JUDGE
%         {
%             \ELL{\zlst{[]}}
%                 {\zlst{[}\exprx{r_1}\zlst{, ...,\ }\exprx{r_2}\zlst{]}}
%         }
%         {  \jpair
%             {\freshv{}}
%             {
%                 \SET{(\freshv{}, \zlst{inits\ } \expr{r})}
%             }
%         }
%     }
%     
% \inferrule[Ellipsis-to-empty]
%     {
%         \JUDGE
%             {
%                 \EXPR {\zlst{[}\exprx{r_1}\zlst{, ...,\ }\exprx{r_2}\zlst{]}}
%             }
%             {
%                 \jpair{\expr{r}}
%             }
%     }
%     {\JUDGE
%         {
%             \ELL{\zlst{[}\exprx{r_1}\zlst{, ...,\ }\exprx{r_2}\zlst{]}}
%                 {\zlst{[]}}
%         }
%         {  \jpair
%             {\freshv{}}
%             {
%                 \SET{(\freshv{}, \zlst{reverse (inits\ } \expr{r}\zlst{)})}
%             }
%         }
%     }

%The function $f$ and the set of list expressions
%are produced by \textit{ellipsis interpolation translation},
%which is described in Section \ref{ellipsis-inference-translation}.
%In essence, the interpolation compares both sides of the ellipsis expression
%and replaces sections that vary with fresh variables, while extracting the lists.
%Interpolation is denoted
%$\JUDGE{\ELL{\exprx{1}}{\exprx{2}}}{\jpair{\expr{}}{\slices{}}}$, where
%$\exprx{1}$ is the left-hand side of the ellipsis,
%and $\exprx{2}$ is the right-hand side of the ellipsis.
%$\expr{}$ is the translated expression with fresh variables,
%and $\slices{}$ is an environment containing the fresh variables and corresponding lists.
