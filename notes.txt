
Issue: Empty lists


binSearch = \l.\t.case l of
    Empty -> False
    x1 ... xn -> let k = n/2 + 1 in 
        if x[k] == t then       True
        else if x[k] > t then   binSearch x[1] ... x[k-1] t
        else                    binSearch x[k+1] ... x[n] t
            





writeup.txt:
map f l = Case l of
    x1 ... xn -> f x1 ... f xn

The Ellipsis pattern (LHS) stores the following data:
- x, a ListFuture that "points" at l
- n, the length of the list

The Ellipsis constructor (RHS) has the following data:
- The expression applied to each term (App f x)
- The first index (1)
- The last index (n)
- The variable being iterated upon (x)

When eval encounters an Ellipsis constructor, it evalutes it like this:
- Check the indices, if it points backwards, reverse the list and transform the indices
- Take the list and cut it to the first element (For example, for [1,2,3,4,5], x3 ... xn would move to [3,4,5])
- Take the "range" to count down as we go through the list
- Iterate through the list:
    If countdown is done, return empty
    If coundown is not done, but the list is empty, runtime error (e.x., for [1,2,3], x1 ... xn -> x1 ... x4 would make a runtime error)
    Otherwise, evaluate the expression applied to each term (e.x., in map f x applied to [1,2,3], it "x" would be replaced by 1, then 2, then 3.


Empty + 1 in binSearch

-- create an iterator
-- 

-- \l. case l of
-- x1 ... xn --> [("l", a list), ("x", ListFuture "l"), ("n", LenFuture "l")]
-- 
Writeup:

map f l = Case l of
    x1 ... xn -> f x1 ... f xn

The Ellipsis pattern (LHS) stores the following data:
- x, a ListFuture that "points" at l
- n, the length of the list

The Ellipsis constructor (RHS) has the following data:
- The expression applied to each term (App f x)
- The first index (1)
- The last index (n)
- The variable being iterated upon (x)

When eval encounters an Ellipsis constructor, it evalutes it like this:
- Check the indices, if it points backwards, reverse the list and transform the indices
- Take the list and cut it to the first element (For example, for [1,2,3,4,5], x3 ... xn would move to [3,4,5])
- Take the "range" to count down as we go through the list
- Iterate through the list:
    If countdown is done, return empty
    If coundown is not done, but the list is empty, runtime error (e.x., for [1,2,3], x1 ... xn -> x1 ... x4 would make a runtime error)
    Otherwise, evaluate the expression applied to each term (e.x., in map f x applied to [1,2,3], it "x" would be replaced by 1, then 2, then 3.
    









-- x1 ... xn -> (f x1) ... (f xn)

-- (x1 ... xn, y1 ... ym)  -> let k = min m n in (x1, y1) ... (xk, yk)
-- Ellipsis' . . . [Name]

-- \l.case l of (x1 ... xn) -> \l2.case l2 of (y1 ... ym) -> let k = min m n in (x1, y1) ... (xk, yk)

{-
\l.case l of
x1 ... xn -> e

f = \l.case l of
    x1 ... xn -> x2

f E[2,3,4,5,6]

[(l=V[2,3,4,5,6]),
 (x=l),
 (n=5)      -- bind the length of the list because we're evaluating it anyways
 ]
 -}

Writeup:

In the extended lambda calculus, we have the concept of a pattern/case, similar to haskell.

succList = \l.(letrec succList' = \list.case list of
    []      -> []
    (x:xs)  -> (x+1:succList xs)

The idea is to extend these patterns with ellipsis

succList = \l.case l of
    x1 ... xn   -> x1 + 1 ... xn + 1



This might actually be better in an array-access language like Rust. Wouldn't that be cool!



The problem here is that it's actually nlogn lol
binSearch (x1 ... xn) t     = if x[n/2] == t then     n/2
                              else if x[n/2] > t then binSearch (x1 ... x[n/2-1]) t
                              else                    binSearch (x[n/2+1] ... xn) t



sort :: [Int] -> [Int]
sort []        = []
sort [x]       = [x]
sort x1 ... xn = merge (sort x1 ... x[n/2]) (sort x[n/2+1] ... xn)

merge :: [Int] -> [Int] -> [Int]
merge xs [] = xs
merge [] ys = ys
merge (x:xs) (y:ys)     = if x <= y then (x:merge xs (y:ys))
                          else (y:merge (x:xs) ys)

merge (x1 ... xn) (y1 ... yn)   = 


Todo:
explain my semantics in easier format for review
smart constructor -- Case vs case -- 
Case can only match on variables so make it variable only (name)

matrices using nested lists

swapFirstAndLast
x1 ... xn -> xn x2 ... x(n-1) x1

Sorting algorithms, merge sort

x1 ... xn -> (x1, xn) ... (xn, x1)

(x1, xn) (x2, xn-1) ... (
if I have examples that would right but can't be expressed, why? Where does the limitation come from? Could ellipsis be extended to work on this example?
How does the ellipsis notation cooperate with other list functions?


\l.map f $ reverse l

versus

\l.case l of
x1 ... xn -> f xn ... f x1

x1 ... xn -> (x1, x2) ... (xn-1, xn)
closest neighbors aux function

zip

Functions that work:
map
tail
removeNth, sort of... I just messed it up
firstN
reverse
nth
len

report on standard ml
match rules
turn haskell fns into operational semantics
note the mono font for concrete syntax
check 381 notes


explain in thesis

show concrete syntax, 

Alts = rules

Error checking, things like bounds checking should be pretty robust

for example in removenth, relationship between m and n -- n <= m
when is the function well defined, when does it lead to an error? Can we add anything to define the funciton better? Is there a loss of completeness?


There are two ways this feature can be evaluat3ed: As an explanation of core functions (like above), or as a replacement of more
complex functions (like if there's a function that does something like "firstN $ map $ removeNth $ ..."
smart constructors



what did you do with mike bailey? I saw a file called erwig.glib during a lecture

The Egison paper is very similar to mine. I should figure out how they use the ellipsis pattern in their langauge, and if I need to
make mine different or unique in some way.

Task list:
(1) Add VCons and restate things in terms of VCons CHECK
(2) Find more papers about extending capabilities of pattern matching
(3) Start writing

then
(4) Start writing functions in terms of ellipsis

completeness checkers for patterns, should be a related work -- and how complete is my pattern, and how complete can I make it?
What is the reciprocal pattern? What would an error/warning look like wrt removeN

Papers for lit review:
                                                                Skim
Name                                                Link        Rating      Notes
Pattern Matching with Abstract Data Types           [1]         3           Ellipses sort of feel like an interface for a list
Fortifying Macros                                   [2]         1           Has its own ellipsis, not similar to mine but kinda formal
Efficient Manipulation of Binary Data Using Patt... [3]         -
Essence of the Iterator Pattern                     [4]         0           OOP patterns, not FP patterns
Cubical Agda a Dependently Typed Programming Lan... [5]         -
Formal Derivation of a Pattern Matching Algorithm   [6]         3           Might be a good include
A Functional...
Thunks and the Lambda Calculus                      [8]         -           Should learn thunks
Functional Programming in Pattern-Match-Oriented... [9]         5           The egison paper
Compilation of Non-Linear, Second-Order Patterns... [10]        -           
Scrap Your Boilerplate: A Practical Design Patte... [11]        -           For something in the code, not a related work


[1] https://www.cambridge.org/core/journals/journal-of-functional-programming/article/pattern-matching-with-abstract-data-types1/04DD26A0E6CA3A1E87E0E6AE8BC02EED?utm_campaign=shareaholic&utm_medium=copy_link&utm_source=bookmark
[2] https://www.cambridge.org/core/journals/journal-of-functional-programming/article/fortifying-macros/2AC116FC3DD38075BDF61C464ED35507
[3] https://www.cambridge.org/core/journals/journal-of-functional-programming/article/efficient-manipulation-of-binary-data-using-pattern-matching/5FC43829285903225B3BD0A52B1AD975
[4] https://www.cambridge.org/core/journals/journal-of-functional-programming/article/essence-of-the-iterator-pattern/3FC26EB2A63E6A2B29E07B9F0D5C5BCD
[5] https://www.cambridge.org/core/journals/journal-of-functional-programming/article/cubical-agda-a-dependently-typed-programming-language-with-univalence-and-higher-inductive-types/839F14B5227969B039D7B57AA8272C6B
[6] https://core.ac.uk/download/pdf/82375721.pdf
[7] https://search.library.oregonstate.edu/permalink/01ALLIANCE_OSU/1ffs2e1/cdi_webofscience_primary_000575381000001
[8] https://tidsskrift.dk/brics/article/download/18797/16442
[9] https://arxiv.org/pdf/2002.06176.pdf
[10] https://search.library.oregonstate.edu/permalink/01ALLIANCE_OSU/1ffs2e1/cdi_springer_books_10_1007_BFb0024194
[11] https://www.microsoft.com/en-us/research/wp-content/uploads/2003/01/hmap.pdf

Think of something beyond environment as pairs
Write about it
Write about my interpreter
Active patterns, spj pattern guards and transformational patterns
Papers about extending capabilities of pattern matching
haskell.org, wiki page about pattern matching
haskell specification? yes haskell report, jfp




Step 1: 


Added pretty printer. Now do examples.
map and fold done, and a few more. Can't do zip with my types right now. Will need to change cons type if we're going to talk about
stuff like matrices


Evaluate: does it make sense to use them on the left hand, right hand in examples?
Pretty printer
map, fold, reverse, second, length, nth, zip, find
implement in my language, then how would we define it in
Don't just store the lenght, then we w would be calculating the length for nothing if it was a small access
Has to be somethign more compliacted than (name,val) in environment -- 
Don't do more than necessary computationally
Write notes to inform thesis -- this step right now is important!

ex: Creating our langauge, what would ellipsis patterns look like, how would we implmenet them, define operational semantics, argue or improve semantics, evaluate expressiveness

Look at library, how many can we implement, how much shorter, and cool cases (or uncool cases), matrices, 

------------------------------------------------------------------------

True design decisions:
Should yi ... yj i > j count backwards? Yes
Should we keep a 







What is ellipsis?

On the LHS, we have:
y1 ... yn -> <something>
Which just specifies the name of the list (y) and the length (n)

On the RHS, we have
y1 ... yn -> <something> yi ... yj <something>
or                     f yi ... f yj
or?                    yi `f` ... `f` yj




Lost my computer

What are the things I need to think of?



What is allowed?
y1 ... yn   -> yi
y1 ... yn   -> y1 ... y3
y1 ... yn   -> yn-5 ... yn
y1 ... yn   -> yi ... yj
f, y1 ... yn   -> f y1 ... f yn
g, y1 ... yn   -> y1 `g` ... `g` yn
f, y1 ... yn   -> y1 (f y2) ... (f yn-1) yn

What is not allowed?

g, y1 ... yn -> y1 `g` y2 y3 `g` y4 ... yn-1 `g` yn
any sort of inductive pattern-establishing system
(i.e. x1 x3 x5 ... xn-5 xn-3 xn-1) would just be:
      x1 x3 x5 x6 x7 x8 ... xn-7 xn-6 xn-5 xn-3 xn-1)

Ambiguous
f, y1 ... yn    -> f y1 ... yn
    It would have to be either
    f y1 y2 ... yn
    or 
    f y1 ... f yn-1 yn
    So any operation on the ellipsis has to be applied to both sides.

y1 ... yn -> yn ... y1
    The ellipsis must count up?
    OR does yi ... yj, i > j mean count backwards?





identity l:
case l of
    y1 ... yn   -> y1 ... yn

map f l:
case l of
    y1 ... yn   -> f y1 ... f yn

head l:
case l of
    y1 ... yn   -> y1

tail l:
case l of
    y1 ... yn   -> y2 ... yn

at l i
case l of
    y1 ... yn   -> yi

insert l i k
case l of
    y1 ... yn   -> y1 ... yi k yi+1 ... yn










pg 72



{-
f (l) = case l of 
        x:xs -> x + 1
        []   -> 0
pattern matching adds bindings to the environment according ot the pattern

evaluate
???
add bindings to environment
-}


{-
plusfive = Abstr "x" $ Add (Var "x") (Value $ Con 5)


plus = Abstr "x" $ Abstr "y" $ Add (Var "x") (Var "y")

stz' = (Abstr "x" $ 
         Case (Var "x") 
             (Con 0)     (Value $ Con 0) 
                         (Add (Var "x") (App (Var "stz") (Add (Var "x") (Value $ Con (-1)))))
       )

stz = LetRec "stz" stz'
-- eval [] $ stz (App (Var "stz") (Value $ Con 10))

len' = (Abstr "l" $
        Case (Var "l")
            Empty       (Value $ Con 0)
                        (Add (Value $ Con 1) (App (Var "len") (Tail (Var "l"))))
       )

len = LetRec "len" len'

pp :: Expr -> String
pp (Var vn)         = vn
pp (App e1 e2)      = "(" ++ (pp e1) ++ " " ++ (pp e2) ++ ")"
pp (Abstr vn e)     = "\\" ++ vn ++ "." ++ (pp e)

main :: IO ()
main = do
  putStrLn $ show $ eval [] $ 
                len (App (Var "len") (Value $ Cons 100 $ Cons 2 $ Cons 3 $ Cons 5 Empty))

pp (Value (Con i))  = show i
pp (Value Empty)    = ""
pp (Value (Cons i e)) = "[" ++ ppCons (Cons i e) ++ "]"
pp (Let vn e1 e2)   = "" -- "let " ++ vn ++ " = (" ++ (pp e1) ++ ") in " ++ (pp e2)
pp (Case vn c1 b1 b2) = "" -- "case " ++ vn ++ " of " ++ (pp c1) ++ " -> "
                        -- ++ (pp b1) ++ "; Otherwise -> " ++ (pp b2)
pp (Value (Fun n e)) = n ++ " " ++ (pp e)

ppCons :: Val -> String
ppCons (Cons i (Cons i2 e))     = show i ++ "," ++ ppCons (Cons i2 e)
ppCons (Cons i _)               = show i

bReduc :: Expr -> Expr
bReduc e = bReduc' e

-- Top level funciton, takes in Expr and outputs reduced expr
bReduc' :: Expr -> Expr
bReduc' (Var vn) = (Var vn)
bReduc' (Abstr vn e) = (Abstr vn (bReduc' e))
bReduc' (App e1 e2) = bApp (bReduc' e1) (bReduc' e2)
bReduc' e = e

-- Helper function for bReduc', for beta applications
bApp :: Expr -> Expr -> Expr
bApp (Abstr vn e1) e2 = let e2' = bReduc' e2 in
                            let e1' = replaceVar vn e2' e1 in
                                bReduc' e1'
bApp e1 e2 = App (bReduc' e1) (bReduc' e2)

-- Helper function for bReduc'.bApp, finds and replaces "needle" with "repl" in
-- "haystack".
--            needle     repl    haystack
replaceVar :: Name -> Expr -> Expr       -> Expr
replaceVar ndl repl (Var hstk) = if ndl == hstk then repl else Var hstk
replaceVar ndl repl (App hstk1 hstk2) = App (replaceVar ndl repl hstk1)
                                            (replaceVar ndl repl hstk2)
replaceVar ndl repl (Abstr hstk_vn hstk_e) = Abstr hstk_vn 
                                                   (replaceVar ndl repl hstk_e)

EXAMPLE I FAILED ON?

(\x.\y.(y x) (y w))         
homework answer:    \z.(z (y w))        
prog answer:        \y.(y (y w))
calculator answer:  with some finagling, \y0.y0 (y w), so y0 = z
hand answer:        \x.\y.(y x) (y w) -> 
"Avoid capturing the free variable y in (y w)"

Does this mean I need to take a first pass and replace any free variables?
-}





















meeting w8 (2023-03-7)
=================================================================================
Progress:
=================================================================================
Made letrec

=================================================================================
Pre-meeting notes and questions
=================================================================================

Where is this concept of "val" from? 
-> Various books
-> John Mitchell        Foundations of Programming Languages
-> 

Explore Fix:

f (Fix f) = Fix f

Y combinator does that ^

Don't have a great intuition regarding y combinator, but I think I understand
fix and fixed points and how it ties into my letrec



=================================================================================
Notes:
=================================================================================

to make pattern matching need to make pattern as a type

evaluate patterns against expressions to produce bindings
      or expressions against patterns

pattern could fail, not match, account for failure

we were starting with call by value

but peyton jones is call by name -- would get rid of values

=================================================================================
Deliverables:
=================================================================================
Read simon peyton jones -- Compiling of functional languages
make patterns -- follow peyton jones closely
ints bools and lists

add ellipsis as a pattern
and expressions






meeting w7 (2023-02-21)

=================================================================================
Progress:
=================================================================================

Only had 2 hours to work; started eval

=================================================================================
Q&A:
=================================================================================

fun vs abstr

apply fun with app?

=================================================================================
Notes:
=================================================================================

see operational semantics of app rule

-- case eval Expr of 
--  Val -> eval Expr
--  ow  -> eval Expr

-- try to impelment length
-- add let rec

-- applFun :: Env -> Val -> Expr -> Val
-- applFun e (Fun fn b) i = case (fn, i) of
--                           ("+", (App (Value $ Con i1))


=================================================================================
Deliverables:
=================================================================================

finish eval

do semantics in ellipsis




meeting w6 (2023-02-14)

=================================================================================
Progress:
=================================================================================

do map function in my abstract syntax:

let rec map = (\f.\l.case l of:
    Empty       -> Empty
    Otherwise   -> Cons (f (head l)) (map f (tail l)))



think about how that map function could be represented by our pattern language

We know:
map f:
x1, ..., xn -> f x1, ..., f xn

abstract syntax for pattern language -- start based on map --- look at all functions

See ellipsis.hs

=================================================================================
Q&A:
=================================================================================

Just where to go from here

=================================================================================
Notes:
=================================================================================

Let should be let rec

ellipsis.hs only really need one type of name

list of parameter name

synoynm for string

infinite application using same style as List Expl Expl or Cons (currying style)

Var String is all I really need

Position in list will have to be smart, a sublanguage

Semantics directly

Write interpreter? Write in lambda calculus?

Map or compile to fn'al langauge -- meaning in terms of an explanation

Pattern language simpler than lambda, less expressive, all pattern langauge can
go to lambda, but not all lambda can go to pattern language

lambda calculus:
don't replace expressions, too much
write a f'n Expr -> Value
Incldue operations on integers, +, binop
Val for values that

Function 
eval :: Env -> Expr -> Val

Env list of (name, value)

Expr has vals in it -- maybe just make vals a possiblitiy of expr

Nested constructors, smart constructors

A value is a pretty general thing



=================================================================================
Deliverables:
=================================================================================
implement eval (test)







meeting w4 (2023-01-31)

=================================================================================
Progress:
=================================================================================

Read types and PLs chapters 10, 11.5, 11.6, 11.9, 11.12
Implemented let, case, lists (and prettyprinted them)

=================================================================================
Q&A:
=================================================================================

What is |-> (see pg 124, not |- )
substitution

=================================================================================
Notes:
=================================================================================

let map = (



) in ABCABC

check f'n might be complicated -- offramp is find a semantics for the pattern
language 

Our ellipsis is DEFINED to be solid, not inductive

added syntactic sugar

very precise about our definition of ellipsis

pattern P

semantic f'n S : P -> D

langauge L

S' : L -> D

check : P * L -> B

Probably can't express general recursion

Saved by limited language


Semantics of pattern language

Then:

Check (p,l) => S(p) = S'(l)

Compile : P -> L

Explain : L -> P




=================================================================================
Deliverables:
=================================================================================
do map function in my abstract syntax
think about how that map function could be represented by our pattern language
abstract syntax for pattern language -- start based on map --- look at all functions\









meeting w3 (2023-01-24)

=================================================================================
Progress:
=================================================================================
Made lambda calculus
With beta reduction
Possibly erroneous

=================================================================================
Q&A:
=================================================================================
Current example "captures free variable y", is that ok? what do?

Test suite for lambda calculus? too trivial?

What feature to add to start out? Lists? Or are we doing the super lambdacalculusy list?

=================================================================================
Notes:
=================================================================================

Lists added

Abstract syntax for ellipsis

Pattern langauge, explanation langauge is the ellipsis langauge (Expl)

check :: Expr -> Expl -> Bool

Lambda calculus map, true matches explanation

add let expressions

let map f 

Case expression lambda calculus

Read types and programming langauges chapters 11.6, 11.9, let expressions, 

Play with case expressions

Case deconstructs and analyzes

extend lambda calculus syntax by lists, case, and let

do map fucntion in my abstract syntax

THEN

Think about an explanation langauge

THEN

think about check function

=================================================================================
Deliverables:
=================================================================================
